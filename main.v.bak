module Probable (	output [7:0] x1, x2, x3, x4, x5, x6,
				input start,
				input clk, 
				input [7:0] keypad, //! Estimate
				output [7:0] buzzer, //! Estimate
				output green, red);
	
	reg [3:0] state;
	reg [1:0] score;
	reg [1:0] level;
	
	reg [30:0] delay [0:3];
	
	
	wire print_done, gen_done, buz_done;
	wire [29:0] phrase;
	wire [16:0] result;
	wire [16:0] response;
	
	wire tick;
	wire [27:0] counter;
	
	slow s(clk, tick, counter);
	
	print p(tick, state, print_done, phrase, x1, x2, x3, x4, x5, x6);
	generator g(tick, state, gen_done, level, phrase, result, counter);
	
	/*clear_all c(tick, state, x1, x2, x3, x4, x5, x6);
	
	leds_change l(tick, state, green, red);
	
	buzzer b(tick, state, buz_done);
	
	respond r(tick, keypad, response);
	
	*/
	
	function check;
		input [15:0] result;
		input [15:0] response; //! enough?
		if(response===15'bz) //! or x?
			check=1'bx;
		else
			check=(response==result);
	endfunction
	
	
	always@(posedge tick)
			case(state)
			
				4'bx:	begin
						score<=0;
						level<=1;
						delay[1] <= 30*50_000_000;
						delay[2] <= 20*50_000_000;
						delay[3] <= 10*50_000_000;
						if(start)
							state<=0;
						end
						
				0:		if(print_done)
							state<=1;
							
				1:		if(gen_done)
							state<=2;
							
				2: 	if(print_done)
							state<=10;
				
				3:		if(buz_done)
							if(level==4)
								state<=6;
							else
								state<=1;
								
				4,5: 	if(buz_done)
							state<=6;
							
				6:		if(print_done)
							state<=7;
					
				7:		state<=8;
				
				8:		if(print_done)
							state<=9;
							
				10:   if(delay[level]==0)
							case(check(response, result))
								0: state<=4;
								1: begin
									score<=score+1;
									level<=level+1;
									state<=3;
									end
								1'bx: state<=5;
							endcase
						else
							delay[level]<=delay[level]-1;
			endcase
			
endmodule				
				
module slow(input clk, output reg tick, output reg [27:0] counter);
	initial
		tick = 0;
	always@(posedge clk)
		begin
		counter<=counter +1;
		if(counter==10_000_000)
			begin
			counter<=0;
			tick=~tick;
			end
		end
endmodule			