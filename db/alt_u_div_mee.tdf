--alt_u_div DEVICE_FAMILY="MAX 10" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=1 WIDTH_N=6 WIDTH_Q=6 WIDTH_R=1 denominator numerator quotient remainder
--VERSION_BEGIN 15.1 cbx_cycloneii 2015:10:21:18:09:23:SJ cbx_lpm_abs 2015:10:21:18:09:23:SJ cbx_lpm_add_sub 2015:10:21:18:09:23:SJ cbx_lpm_divide 2015:10:21:18:09:23:SJ cbx_mgl 2015:10:21:18:12:49:SJ cbx_nadder 2015:10:21:18:09:23:SJ cbx_stratix 2015:10:21:18:09:23:SJ cbx_stratixii 2015:10:21:18:09:23:SJ cbx_util_mgl 2015:10:21:18:09:23:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION add_sub_t3c (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_u3c (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);

--synthesis_resources = 
SUBDESIGN alt_u_div_mee
( 
	denominator[0..0]	:	input;
	numerator[5..0]	:	input;
	quotient[5..0]	:	output;
	remainder[0..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_t3c;
	add_sub_1 : add_sub_u3c;
	add_sub_2 : add_sub_u3c;
	add_sub_3 : add_sub_u3c;
	add_sub_4 : add_sub_u3c;
	add_sub_5 : add_sub_u3c;
	DenominatorIn[13..0]	: WIRE;
	DenominatorIn_tmp[13..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[41..0]	: WIRE;
	NumeratorIn[41..0]	: WIRE;
	NumeratorIn_tmp[41..0]	: WIRE;
	prestg[11..0]	: WIRE;
	quotient_tmp[5..0]	: WIRE;
	sel[6..0]	: WIRE;
	selnose[41..0]	: WIRE;
	StageIn[13..0]	: WIRE;
	StageIn_tmp[13..0]	: WIRE;
	StageOut[11..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[5..5];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[2..2], NumeratorIn[10..10]);
	add_sub_1.datab[1..0] = DenominatorIn[3..2];
	add_sub_2.dataa[] = ( StageIn[4..4], NumeratorIn[15..15]);
	add_sub_2.datab[1..0] = DenominatorIn[5..4];
	add_sub_3.dataa[] = ( StageIn[6..6], NumeratorIn[20..20]);
	add_sub_3.datab[1..0] = DenominatorIn[7..6];
	add_sub_4.dataa[] = ( StageIn[8..8], NumeratorIn[25..25]);
	add_sub_4.datab[1..0] = DenominatorIn[9..8];
	add_sub_5.dataa[] = ( StageIn[10..10], NumeratorIn[30..30]);
	add_sub_5.datab[1..0] = DenominatorIn[11..10];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[11..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"000000", add_sub_5.cout, B"000000", add_sub_4.cout, B"000000", add_sub_3.cout, B"000000", add_sub_2.cout, B"000000", add_sub_1.cout, B"000000", add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[35..0], numerator[]);
	prestg[] = ( add_sub_5.result[], add_sub_4.result[], add_sub_3.result[], add_sub_2.result[], add_sub_1.result[], GND, add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[7..7]), (! selnose[14..14]), (! selnose[21..21]), (! selnose[28..28]), (! selnose[35..35]));
	remainder[0..0] = StageIn[12..12];
	sel[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	selnose[] = ( (! nose[41..41]), (! nose[40..40]), (! nose[39..39]), (! nose[38..38]), (! nose[37..37]), ((! nose[36..36]) # sel[6..6]), (! nose[35..35]), (! nose[34..34]), (! nose[33..33]), (! nose[32..32]), (! nose[31..31]), ((! nose[30..30]) # sel[5..5]), (! nose[29..29]), (! nose[28..28]), (! nose[27..27]), (! nose[26..26]), (! nose[25..25]), ((! nose[24..24]) # sel[4..4]), (! nose[23..23]), (! nose[22..22]), (! nose[21..21]), (! nose[20..20]), (! nose[19..19]), ((! nose[18..18]) # sel[3..3]), (! nose[17..17]), (! nose[16..16]), (! nose[15..15]), (! nose[14..14]), (! nose[13..13]), ((! nose[12..12]) # sel[2..2]), (! nose[11..11]), (! nose[10..10]), (! nose[9..9]), (! nose[8..8]), (! nose[7..7]), ((! nose[6..6]) # sel[1..1]), (! nose[5..5]), (! nose[4..4]), (! nose[3..3]), (! nose[2..2]), (! nose[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[11..0], B"00");
	StageOut[] = ( ((( StageIn[10..10], NumeratorIn[30..30]) & selnose[35..35]) # (prestg[11..10] & (! selnose[35..35]))), ((( StageIn[8..8], NumeratorIn[25..25]) & selnose[28..28]) # (prestg[9..8] & (! selnose[28..28]))), ((( StageIn[6..6], NumeratorIn[20..20]) & selnose[21..21]) # (prestg[7..6] & (! selnose[21..21]))), ((( StageIn[4..4], NumeratorIn[15..15]) & selnose[14..14]) # (prestg[5..4] & (! selnose[14..14]))), ((( StageIn[2..2], NumeratorIn[10..10]) & selnose[7..7]) # (prestg[3..2] & (! selnose[7..7]))), ((( StageIn[0..0], NumeratorIn[5..5]) & selnose[0..0]) # (prestg[1..0] & (! selnose[0..0]))));
END;
--VALID FILE
